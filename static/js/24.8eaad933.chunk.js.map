{"version":3,"file":"static/js/24.8eaad933.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","pages/Contact.styled.jsx","pages/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const getFilter = state => state.filter;\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getError = state => state.contacts.error;\n\nexport const isLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = state => {\n  const filter = getFilter(state);\n  const contacts = getContacts(state);\n\n  return contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter);\n  });\n};\n","import styled from 'styled-components';\n\nconst FormContainer = styled.form`\n  width: 360px;\n  display: flex;\n  flex-direction: column;\n  margin-left: 64px;\n  margin-top: 32px;\n  border: 1px dashed gold;\n  border-radius: 4px;\n  padding: 16px;\n`;\n\nconst AddButton = styled.button`\n  margin-top: 16px;\n  background-color: #53136d;\n  width: 128px;\n  border: none;\n  color: white;\n  padding: 8px 16px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  border-radius: 2px;\n  cursor: pointer;\n  :active {\n    box-shadow: 0px 0px 2px #bababa, inset 0px 0px 7px #2b1717;\n  }\n`;\n\nconst Title = styled.p`\n  margin-top: 16px;\n  margin-bottom: 5px;\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport { AddButton, Title, FormContainer };\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport { AddButton, Title, FormContainer } from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nexport const AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleInput = e => {\n    const itsValue = e.currentTarget.value;\n    const itsName = e.currentTarget.name;\n\n    if (itsName === 'name') {\n      setName(itsValue);\n    }\n    if (itsName === 'number') {\n      setNumber(itsValue);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    if (\n      contacts.filter(contact => {\n        return contact.name\n          .toLowerCase()\n          .includes(newContact.name.toLowerCase());\n      }).length !== 0\n    ) {\n      alert(`${newContact.name} already in contact list`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormContainer onSubmit={handleSubmit}>\n      <Title>Name:</Title>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleInput}\n      />\n      <Title>Phone number:</Title>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleInput}\n      />\n      <AddButton type=\"submit\">Add contact</AddButton>\n    </FormContainer>\n  );\n};\n","import styled from 'styled-components';\n\nconst FilterContainer = styled.div`\n  width: 360px;\n  display: flex;\n  flex-direction: column;\n  margin-left: 64px;\n  margin-top: 32px;\n  border: 1px dashed purple;\n  border-radius: 4px;\n  padding: 16px;\n`;\n\nconst Title = styled.p`\n  margin: 0;\n  margin-top: 12px;\n  margin-bottom: 12px;\n  min-width: 360px;\n`;\n\nexport { Title, FilterContainer };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterSlice } from 'redux/filter/filerSlice';\nimport { getFilter } from 'redux/contacts/contactsSelectors';\nimport { FilterContainer, Title } from './Filter.styled';\n\nexport const Filter = () => {\n  const { changeFilter } = filterSlice.actions;\n\n  const dispatch = useDispatch();\n\n  const filter = useSelector(getFilter);\n\n  const setFilterHandler = f => dispatch(changeFilter(f.toLowerCase()));\n\n  return (\n    <FilterContainer>\n      <Title>Find contact by name</Title>\n      <input\n        name=\"filter\"\n        type=\"text\"\n        onChange={e => {\n          setFilterHandler(e.currentTarget.value);\n        }}\n        value={filter}\n      />\n    </FilterContainer>\n  );\n};\n","import styled from 'styled-components';\n\nconst DelBtn = styled.button`\n  width: 64px;\n  height: 24px;\n  text-align: center;\n  padding: 4px;\n  margin-left: 8px;\n  background-color: gold;\n  color: #53136d;\n  border: none;\n  :active {\n    box-shadow: 0px 0px 2px #bababa, inset 0px 0px 7px #2b1717;\n  }\n`;\n\nconst List = styled.li`\n  max-width: 360px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  justify-content: space-between;\n  margin-left: 64px;\n  margin-top: 0;\n  margin-bottom: 10px;\n`;\n\nconst ContactList = styled.ul`\n  width: 420px;\n  display: flex;\n  flex-direction: column;\n  margin-top: 32px;\n  border-radius: 4px;\n  padding: 16px;\n`;\n\nexport { List, DelBtn, ContactList };\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/contactsSelectors';\nimport {\n  deleteContactById,\n  getAllContacts,\n} from 'redux/contacts/contactsOperations';\nimport { List, DelBtn, ContactList } from './Contacts.styled';\n\nexport const ListOfContacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  const contactDeleter = id => {\n    dispatch(deleteContactById(id));\n  };\n\n  const listToRender = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      <ContactList>\n        {listToRender.map(({ id, name, number }) => {\n          return (\n            <List key={id}>\n              <span>\n                {name}: {number}\n              </span>\n              <DelBtn type=\"button\" onClick={() => contactDeleter(id)}>\n                Delete\n              </DelBtn>\n            </List>\n          );\n        })}\n      </ContactList>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nconst Header = styled.h1`\n  color: purple;\n`;\n\nconst Loader = styled.b`\n  position: absolute;\n  transform: translate(210px, -31px);\n`;\n\nconst Title = styled.p`\n  margin-left: 64px;\n  font-weight: 700;\n`;\n\nexport { Loader, Title, Header };\n","import { AddContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ListOfContacts } from 'components/Contacts/Contacts';\nimport { useSelector } from 'react-redux';\nimport { isLoading } from 'redux/contacts/contactsSelectors';\nimport { Loader, Title, Header } from './Contact.styled';\n\nconst Contacts = () => {\n  const loadingMarker = useSelector(isLoading);\n\n  return (\n    <>\n      <Header>Phonebook</Header>\n      <AddContactForm />\n      <Filter />\n      <Title>Contacts</Title>\n      {loadingMarker && <Loader> is updating...</Loader>}\n      <ListOfContacts />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","getFilter","state","filter","getContacts","contacts","items","isLoading","selectFilteredContacts","contact","name","toLowerCase","includes","FormContainer","styled","AddButton","Title","AddContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInput","e","itsValue","currentTarget","value","itsName","onSubmit","preventDefault","newContact","length","addContact","alert","type","pattern","title","required","onChange","FilterContainer","Filter","changeFilter","filterSlice","f","DelBtn","List","ContactList","ListOfContacts","useEffect","getAllContacts","listToRender","map","onClick","deleteContactById","contactDeleter","Header","Loader","loadingMarker"],"sourceRoot":""}